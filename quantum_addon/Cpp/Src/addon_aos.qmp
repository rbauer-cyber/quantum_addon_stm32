<?xml version="1.0" encoding="UTF-8"?>
<!--${BaseAOs}-->
<package name="BaseAOs" stereotype="0x02" namespace="APP::" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <!--${BaseAOs::Terminal}-->
 <class name="Terminal" superclass="qpcpp::QActive">
  <!--${BaseAOs::Terminal::inst}-->
  <attribute name="inst" type="Terminal" visibility="0x00" properties="0x01"/>
  <!--${BaseAOs::Terminal::m_timeEvt}-->
  <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
  <!--${BaseAOs::Terminal::m_gotReply}-->
  <attribute name="m_gotReply" type="bool" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::Terminal::m_input[40]}-->
  <attribute name="m_input[40]" type="char" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::Terminal::m_replySize}-->
  <attribute name="m_replySize" type="std::uint8_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::Terminal::m_gotChar}-->
  <attribute name="m_gotChar" type="bool" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::Terminal::m_maxInputSize}-->
  <attribute name="m_maxInputSize" type="std::uint8_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::Terminal::m_consoleInit}-->
  <attribute name="m_consoleInit" type="std::uint8_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::Terminal::Terminal}-->
  <operation name="Terminal" type="" visibility="0x00" properties="0x00">
   <code>  : QActive(Q_STATE_CAST(&amp;initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
  </operation>
  <!--${BaseAOs::Terminal::DispatchCommand}-->
  <operation name="DispatchCommand" type="void" visibility="0x00" properties="0x04">
   <!--${BaseAOs::Terminal::DispatchCommand::command}-->
   <parameter name="command" type="char"/>
   <code>consoleDisplay(&quot;Empty Dispatch command\r\n&quot;);</code>
  </operation>
  <!--${BaseAOs::Terminal::LoadCustomEvt}-->
  <operation name="LoadCustomEvt" type="void" visibility="0x00" properties="0x04">
   <!--${BaseAOs::Terminal::LoadCustomEvt::customEvent}-->
   <parameter name="customEvent" type="const CustomEvt*"/>
   <code>consoleDisplay(&quot;Empty Custom Event command\r\n&quot;);</code>
  </operation>
  <!--${BaseAOs::Terminal::PublishShowStateEvent}-->
  <operation name="PublishShowStateEvent" type="void" visibility="0x02" properties="0x00">
   <code>// Cause system to broadcast state
CustomEvt* pe = Q_NEW(CustomEvt, SHOW_STATE_SIG);
QP::QActive::PUBLISH(pe, this);</code>
  </operation>
  <!--${BaseAOs::Terminal::ConsoleAsyncReadInit}-->
  <operation name="ConsoleAsyncReadInit" type="void" visibility="0x00" properties="0x00">
   <code>if ( m_consoleInit == 0 )
{
    memset(m_input, 0, m_maxInputSize);
    m_gotReply = false;
    m_gotChar = false;
    m_replySize = 0;

    consoleReadAsyncInit();
    consoleReadByteAsync();
    m_consoleInit = 1;
}</code>
  </operation>
  <!--${BaseAOs::Terminal::SM}-->
  <statechart properties="0x00">
   <!--${BaseAOs::Terminal::SM::initial}-->
   <initial target="../1">
    <action>m_maxInputSize = sizeof(m_input)/sizeof(m_input[0]);
subscribe(CUSTOM_SIG);</action>
    <initial_glyph conn="71,14,5,1,-9">
     <action box="0,-2,10,2"/>
    </initial_glyph>
   </initial>
   <!--${BaseAOs::Terminal::SM::running}-->
   <state name="running">
    <!--${BaseAOs::Terminal::SM::running::initial}-->
    <initial target="../4">
     <action>consoleDisplay(&quot;Terminal running\r\n&quot;);
m_maxInputSize = sizeof(m_input)/sizeof(m_input[0]);</action>
     <initial_glyph color="3" conn="53,10,5,1,-11">
      <action box="-9,-3,10,2"/>
     </initial_glyph>
    </initial>
    <!--${BaseAOs::Terminal::SM::running::CUSTOM}-->
    <tran trig="CUSTOM">
     <action>const CustomEvt* pe = static_cast&lt;const CustomEvt*&gt;(e);
LoadCustomEvt(pe);</action>
     <tran_glyph conn="62,20,1,-1,-13">
      <action box="-11,-3,9,2"/>
     </tran_glyph>
    </tran>
    <!--${BaseAOs::Terminal::SM::running::receiveUserReply}-->
    <state name="receiveUserReply">
     <!--${BaseAOs::Terminal::SM::running::receiveUserReply::initial}-->
     <initial target="../1">
      <action>//consoleDisplay(&quot;Terminal ::Receiving USART\r\n&quot;);
#if 0
memset(m_input, 0, m_maxInputSize);
m_gotReply = false;
m_gotChar = true;
m_replySize = 0;

consoleReadAsyncInit();
#else
m_gotChar = true;
#endif</action>
      <initial_glyph conn="17,49,5,0,11,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${BaseAOs::Terminal::SM::running::receiveUserReply::receivingNextChar}-->
     <state name="receivingNextChar">
      <entry>if ( m_gotChar )
{
    m_gotChar = false;
    consoleReadByteAsync();
}

m_timeEvt.armX(50, 0U);</entry>
      <exit>m_timeEvt.disarm();</exit>
      <!--${BaseAOs::Terminal::SM::running::receiveUserReply::receivingNextCha~::TIMEOUT}-->
      <tran trig="TIMEOUT">
       <action brief="Check Input">m_gotChar = (consoleInputReady()) ? true : false;

if ( m_gotChar )
{
    m_gotReply = (consoleInputDone()) ? true : false;
}</action>
       <!--${BaseAOs::Terminal::SM::running::receiveUserReply::receivingNextCha~::TIMEOUT::[NotDone]}-->
       <choice target="../..">
        <guard brief="NotDone">!m_gotReply</guard>
        <action brief="Got Char"/>
        <choice_glyph conn="22,68,5,2,11,-8">
         <action box="4,-3,17,2"/>
        </choice_glyph>
       </choice>
       <!--${BaseAOs::Terminal::SM::running::receiveUserReply::receivingNextCha~::TIMEOUT::[GotReply]}-->
       <choice target="../../../../3">
        <guard brief="GotReply">m_gotReply</guard>
        <action brief="Done">m_replySize = consoleReadString(m_input, m_maxInputSize);
//consoleDisplay(&quot;\r\n&quot;);
//consoleDisplay(m_input);
consoleDisplayArgs(&quot;\r\n%s;&quot;, m_input);
this-&gt;DispatchCommand(m_input[0]);</action>
        <choice_glyph conn="22,68,4,1,9,35,-50,-15">
         <action box="-8,4,16,3"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="22,60,2,-1,8">
        <action box="-7,2,19,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="17,53,22,7">
       <entry box="0,3,6,2"/>
       <exit box="0,5,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="11,43,34,38"/>
    </state>
    <!--${BaseAOs::Terminal::SM::running::sendUserPrompt}-->
    <state name="sendUserPrompt">
     <entry>ConsoleAsyncReadInit();
m_timeEvt.armX(1000, 0U);</entry>
     <exit>m_timeEvt.disarm();</exit>
     <!--${BaseAOs::Terminal::SM::running::sendUserPrompt::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action brief="Send Prompt">consoleDisplay(&quot;Enter command;\r\n&quot;);</action>
      <!--${BaseAOs::Terminal::SM::running::sendUserPrompt::TIMEOUT::[InputReady]}-->
      <choice target="../../../2">
       <guard brief="InputReady">consoleInputReady()</guard>
       <choice_glyph conn="32,31,5,0,-7,12">
        <action box="-16,1,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="42,31,1,-1,-10">
       <action box="-19,-3,21,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="12,23,30,13">
      <entry box="0,3,6,2"/>
      <exit box="0,5,6,2"/>
     </state_glyph>
    </state>
    <!--${BaseAOs::Terminal::SM::running::start}-->
    <state name="start">
     <entry>//consoleDisplay(&quot;Terminal ::Idle\r\n&quot;);
m_timeEvt.armX(1000, 0U);</entry>
     <exit>m_timeEvt.disarm();</exit>
     <!--${BaseAOs::Terminal::SM::running::start::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../3">
      <action brief="Ready">PublishShowStateEvent();
m_consoleInit = 0;</action>
      <tran_glyph conn="28,16,2,0,7">
       <action box="-8,2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="12,7,30,9">
      <entry box="0,3,6,2"/>
      <exit box="0,5,6,2"/>
     </state_glyph>
    </state>
    <state_glyph node="6,2,56,82"/>
   </state>
   <state_diagram size="74,89"/>
  </statechart>
 </class>
 <!--${BaseAOs::CMeasure}-->
 <class name="CMeasure">
  <!--${BaseAOs::CMeasure::m_intervalStartTime}-->
  <attribute name="m_intervalStartTime" type="std::uint64_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_intervalEndTime}-->
  <attribute name="m_intervalEndTime" type="std::uint64_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_intervalElapsedTime}-->
  <attribute name="m_intervalElapsedTime" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_maxElapsedTimeDelta}-->
  <attribute name="m_maxElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_intervalElapsedTimeDelta}-->
  <attribute name="m_intervalElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_intervalCount}-->
  <attribute name="m_intervalCount" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_minElapsedTimeDelta}-->
  <attribute name="m_minElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_avgElapsedTimeDelta}-->
  <attribute name="m_avgElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::kIntervalOffset}-->
  <attribute name="kIntervalOffset" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_avgElapsedTime}-->
  <attribute name="m_avgElapsedTime" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_intervalThresholdCount}-->
  <attribute name="m_intervalThresholdCount" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_updateCount}-->
  <attribute name="m_updateCount" type="std::uint16_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::kMinElapsedTime}-->
  <attribute name="kMinElapsedTime" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::kIntervalCount}-->
  <attribute name="kIntervalCount" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::m_running}-->
  <attribute name="m_running" type="bool" visibility="0x00" properties="0x00"/>
  <!--${BaseAOs::CMeasure::UpdateElapsedTime}-->
  <operation name="UpdateElapsedTime" type="void" visibility="0x00" properties="0x00">
   <code>if ( m_running )
{
    m_intervalEndTime = getMicros();
    uint32_t elapsedTime = m_intervalEndTime - m_intervalStartTime;
    uint32_t elapsedTimeDelta = 0;

    if ( elapsedTime &gt;= kMinElapsedTime )
    {
        if ( m_updateCount &gt;= kIntervalOffset )
        {
            if ( elapsedTime &gt; m_intervalElapsedTime )
                elapsedTimeDelta = elapsedTime - m_intervalElapsedTime;
            else
                elapsedTimeDelta = m_intervalElapsedTime - elapsedTime;

            m_intervalCount += 1;

            if ( elapsedTimeDelta &gt; m_maxElapsedTimeDelta )
            {
                m_maxElapsedTimeDelta = elapsedTimeDelta;
            }
            if ( elapsedTimeDelta &lt; m_minElapsedTimeDelta )
            {
                m_minElapsedTimeDelta = elapsedTimeDelta;
            }

            m_avgElapsedTimeDelta += elapsedTimeDelta;
            m_avgElapsedTime += elapsedTime;

            if ( elapsedTimeDelta &gt; 100 )
            {
                m_intervalThresholdCount += 1;
            }
        }
        else
        {
            m_updateCount += 1;
        }

        m_intervalElapsedTime = elapsedTime;
    }
}</code>
  </operation>
  <!--${BaseAOs::CMeasure::DisplayElapsedTime}-->
  <operation name="DisplayElapsedTime" type="void" visibility="0x00" properties="0x00">
   <code>if ( m_running )
{
    CONSOLE_DISPLAY_ARGS(&quot;elapsed time us = %d;\r\n&quot;, m_intervalElapsedTime);
}</code>
  </operation>
  <!--${BaseAOs::CMeasure::DisplayElapsedTimeDelta}-->
  <operation name="DisplayElapsedTimeDelta" type="void" visibility="0x00" properties="0x00">
   <code>if ( m_running )
{
    if ( m_intervalCount &gt;= kIntervalCount )
    {
        m_avgElapsedTimeDelta = m_avgElapsedTimeDelta / m_intervalCount;
        m_avgElapsedTime = m_avgElapsedTime / m_intervalCount;

        CONSOLE_DISPLAY_ARGS(
            &quot;max/min/avg/avg/cnt elapsed time delta us = %d/%d/%d/%d/%d;\r\n&quot;,
            m_maxElapsedTimeDelta, m_minElapsedTimeDelta,
            m_avgElapsedTimeDelta, m_avgElapsedTime,
            m_intervalThresholdCount);

        Reset();
    }
}</code>
  </operation>
  <!--${BaseAOs::CMeasure::Initialize}-->
  <operation name="Initialize" type="void" visibility="0x00" properties="0x00">
   <!--${BaseAOs::CMeasure::Initialize::minElapsedTime=1000}-->
   <parameter name="minElapsedTime=1000" type="std::uint32_t"/>
   <!--${BaseAOs::CMeasure::Initialize::intervalOffset=4}-->
   <parameter name="intervalOffset=4" type="std::uint32_t"/>
   <!--${BaseAOs::CMeasure::Initialize::intervalCount=120}-->
   <parameter name="intervalCount=120" type="std::uint32_t"/>
   <code>kIntervalOffset = intervalOffset;
kMinElapsedTime = minElapsedTime;
kIntervalCount = intervalCount;

Reset();
m_running = false;</code>
  </operation>
  <!--${BaseAOs::CMeasure::Start}-->
  <operation name="Start" type="void" visibility="0x00" properties="0x00">
   <code>m_intervalStartTime = getMicros();</code>
  </operation>
  <!--${BaseAOs::CMeasure::CMeasure}-->
  <operation name="CMeasure" type="" visibility="0x00" properties="0x00">
   <code>: kIntervalOffset(4)</code>
  </operation>
  <!--${BaseAOs::CMeasure::Run}-->
  <operation name="Run" type="void" visibility="0x00" properties="0x00">
   <code>m_running = true;</code>
  </operation>
  <!--${BaseAOs::CMeasure::Stop}-->
  <operation name="Stop" type="void" visibility="0x00" properties="0x00">
   <code>m_running = false;</code>
  </operation>
  <!--${BaseAOs::CMeasure::Reset}-->
  <operation name="Reset" type="void" visibility="0x00" properties="0x00">
   <code>m_intervalElapsedTime = 0;
m_maxElapsedTimeDelta = 0;
m_minElapsedTimeDelta = 100;
m_avgElapsedTimeDelta = 0;
m_avgElapsedTime = 0;
m_intervalCount = 0;
m_intervalThresholdCount = 0;
m_updateCount = 0;</code>
  </operation>
 </class>
</package>
