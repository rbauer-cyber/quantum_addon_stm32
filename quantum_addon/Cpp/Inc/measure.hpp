//$file${.::../Inc::measure.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: addon.qm
// File:  ${.::../Inc::measure.hpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::../Inc::measure.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef MEASURE_H
#define MEASURE_H

#include "qpcpp.hpp"             // QP/C++ real-time embedded framework
#include <cstdint>

//$declare${BaseAOs::CMeasure} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${BaseAOs::CMeasure} .......................................................
class CMeasure {
public:
    std::uint64_t m_intervalStartTime;
    std::uint64_t m_intervalEndTime;
    std::uint32_t m_intervalElapsedTime;
    std::uint32_t m_maxElapsedTimeDelta;
    std::uint32_t m_intervalElapsedTimeDelta;
    std::uint32_t m_intervalCount;
    std::uint32_t m_minElapsedTimeDelta;
    std::uint32_t m_avgElapsedTimeDelta;
    const std::uint32_t kIntervalOffset;
    std::uint32_t m_avgElapsedTime;
    std::uint32_t m_intervalThresholdCount;
    std::uint16_t m_updateCount;

public:
    void UpdateElapsedTime();
    void DisplayElapsedTime();
    void DisplayElapsedTimeDelta();
    void Initialize();
    void Start();
    CMeasure();
}; // class CMeasure

} // namespace APP
//$enddecl${BaseAOs::CMeasure} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
